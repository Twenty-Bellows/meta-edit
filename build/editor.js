(()=>{"use strict";const e=window.wp.plugins,t=window.wp.editor,n=window.wp.data,a=window.wp.hooks,o=window.wp.components,i=window.ReactJSXRuntime,r=({label:e,value:t,onChange:n,name:r,type:l})=>{const p=(0,i.jsx)(o.TextControl,{label:e,value:t,onChange:n,__next40pxDefaultSize:!0,__nextHasNoMarginBottom:!0});return(0,a.applyFilters)("meta-edit.field.component",p,{label:e,value:t,onChange:n,name:r,type:l})};(0,e.registerPlugin)("meta-edit",{icon:"palmtree",title:"Meta Edit",render:()=>{const e=(0,n.useSelect)((e=>e("core/editor").getCurrentPostType()),[]),a=(0,n.useSelect)((t=>t("core").getPostType(e).supports),[e]);if(!a||!a["meta-edit"]||!a["meta-edit"][0])return;const o=a["meta-edit"][0],l=(0,n.useSelect)((e=>e("core/editor").getCurrentPostId()),[]),p=(0,n.useSelect)((t=>t("core").getEditedEntityRecord("postType",e,l)?.meta),[e,l]),d=e.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase()));return(0,i.jsx)(t.PluginDocumentSettingPanel,{name:"meta-edit-panel",title:`${d} Meta`,children:Object.entries(o).filter((([e])=>void 0!==p[e])).map((([t,n])=>(0,i.jsx)(r,{label:t.replace(/_/g," ").replace(/\b\w/g,(e=>e.toUpperCase())),value:p[t]||"",name:t,type:n,onChange:n=>{wp.data.dispatch("core/editor").editPost({id:l,type:e,meta:{[t]:n}})}},t)))})}})})();